package com.lanou.day06.demointerface;
/*
* 接口就是一组规范或者标准。 它仅仅是规范或者标准，由使用者（生产厂商）去实现对应的规范或者标准。
* 接口只负责定义标准和规范(声明方法，但不实现)
* */
public interface Driving {
    //接口只能定义方法，但是方法只能声明，没有实现
    //在接口中，会默认 为方法 提供abstract关键字   只有声明没有实现的方法叫做抽象方法

    /*
    * 多态在java中有2种实现方式
        方式一： 继承关系
            1. 子类继承于父类。父类规定子类需要重写哪些方法。（父类既可以是抽象类，可以可以不是抽象）。
            2. 子类重写父类中的方法（或者子类实现父类中的抽象方法）
            3. 父类引用指向 子类对象。   父类 变量 = new  子类();
        方式二： 接口实现关系
            1. 定义一个接口，接口中规定实现类必须实现哪些方法。
            2. 定义一个类，实现接口（实现接口中所有的抽象方法）。
            3. 接口引用 指向  实现类对象。  接口  变量 = new  实现类();
            *
            * 接口中的方法 默认是 public abstract修饰的。 即： 接口中的方法都是抽象方法。 抽象方法没有方法体，需要实现类实现方法。
            * 咱们现在用的jdk1.8 也就是java8.在jdk1.8（也就是java8）的时候，接口被强化了。除了可以包含静态常量，抽象方法之外，还可以包含 静态方法以及默认方法
            *
            * 抽象类：用abstract修饰的类称为抽象类。

            接口：是一组规范和标准，往往是对行为的抽象。
            （1）相同点
             1. 接口和抽象类都不能实例化对象。
             2. 接口和抽象类都可以使用多态。
             3. 接口和抽象类都可以包含抽象方法。
             4. 一个类如果实现接口必须实现全部的抽象方法（或者自身定义为抽象类，不现实接口中的方法，由子类去实现），一个类继承于抽象类，必须实现全部的抽象方法（或者自身定义为抽象类，不现实接口中的方法，由子类去实现）。
            （2）不同点
             1. 接口中的属性只能包含静态常量（public static final）。抽象类中的属性可以包含：实例变量、静态变量、常量（静态、非静态），而且访问修饰符可以是（public、缺省、protected、private）
             2. 接口中的方法通常是抽象方法（Java8开始，可以有默认方法和静态方法）。抽象类中的方法可以包含：实例方法（含getter、setter）、静态方法、抽象方法。
3. 接口不能有构造方法（它不是类），抽象类可以包含构造方法。
4. 接口中不能包含初始化块、静态代码块。抽象类中可以包含初始化块和静态代码块。
5. 接口中的默认方法必须用default修饰。抽象类中不需要default就可以实现方法。
6. 接口可以继承别的接口，而且可以继承多个。抽象类可以继承别的类，但只能继承一个类。
7. 一个普通类，只能有一个父类（包括抽象类），但可以实现多个接口。
    * */
    public void driver();
}
