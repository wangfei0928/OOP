package com.lanou.day05.demoblock;

public class Test {

    public static void main(String[] args) {

      /*
        出现在方法内的代码块，局部代码块
        作用：可以改变局部变量的作用域
        初始化代码块  初始化一些对象信息而编写的代码。在对象创建的时候执行
        初始化代码块 和 构造方法谁先执行？  初始化代码块先执行。
        一个类中可以有多个初始化代码块

        初始化代码块的特点：
        1. 在创建对象的时候，自动调用。  每个对象只创建了一次，所以初始化代码块只会执行一次。无法手动调用（因为代码块不同于方法，没有名称）
        2. 初始化代码块 会先于构造方法执行。  所以可把必须要执行的代码写到初始化代码块里，这样每个构造方法就不用重复写这些必须要执行代码了。

        静态代码块：用static修饰的代码块，一旦一个代码块被static修饰，那么这个类就属于类，不属于对象，
        随着类的加载而执行。  后续即使创建对象，也不会再执行了。

        任何东西，一旦加了static，层级必定提升。 对象级的属性、方法、代码块，都会变成类级。

        首次使用 子类Student时，会加载子类。 因为子类Student继承与父类Person，所以在加载Student之前，
        会先加载父类Person（你不加载父类，怎么知道自己有多少属性？因为有些属性是继承过来。）。
        在继承关系里，继承链上的所有父类都会被加载，而且越靠上的类，越先加载。 静态代码块会随着类的加载而加载。

        执行子类构造方法的时候，默认第一行会先执行父类构造方法super（xx）, 又因为初始化代码块要先于构造方法执行，所
        有先执行父类的初始化代码块，然后执行父类的构造方法，再执行自身的初始化代码块，再执行自身的构造方法。
      */
        {
            int a = 10;
        }
//        System.out.println(a);

        Student student = new Student();
        student.study();

        Student student1 = new Student();


    }
}
